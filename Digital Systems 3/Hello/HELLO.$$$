; **********************************************************
; * Name : Simon Brennan				   *
; * Student Number : 2021282				   *
; * Date : 30/03/2003					   *
; * Assignment No : LAB6.asm				   *
; * Description : This program is a 8 bit binary counter   *
; *		  that counts in 8421 code, through portd  *
; *		  on a seven segment display		   *		  
; *		  using a half a second interval loop      *
; *		  The counter will count up when	   *
; *		  the switch on PortA bit 4 is pressed,    *
; * 		  count down when switch on PortA          * 	
; *		  bit 5 is pressed, and give an error	   *	
; *		  message when both switches are pressed.  *
; * 							   *
; * Inputs : Address 03h -> Status   		    	   *
; *	     Address 02h -> PCL				   *
; *	     Address 1h	 -> F				   *		
; *	     Address 9fh -> Adcon1			   *	
; * 	     Address 88h -> TrisD		           *
; *	     Address 85h -> TrisA			   *
; *          Address 20h -> Loop1			   *	
; *          Address 21h -> Loop2			   *
; *          Address 22h -> Loop3			   *		
; *          Address 23h -> Counter			   *		
; * 	     Address 05h -> PortA			   *
; * Outputs: Address 03h -> PortD			   *
; *							   *
; * Version: 1.0 - Works perfectly                         *
; * 	     1.1 - Added Seven segment display		   *
; * 	     1.2 - Made it count 0-9, 9-0		   *
; *	     1.3 - Simplified FF and 10 check		   *	 	
; **********************************************************

	list p=16F877
PCL		EQU	02h	; Address of program counter
F		EQU	1h	; 
Status 		EQU	03h 	; Address of status register
TrisA   	EQU	85h	; Address of Tristate Buffer A.
TrisD  		EQU     88h 	; Address of Tristate Buffer D.
Loop1  		EQU	20h 	; Count variable for the first loop
Loop2  		EQU	21h 	; Count variable for the second loop
Loop3  		EQU	22h 	; Count variable for the first loop
Counter		EQU	23h	; Stores the status of counter
PortA   	EQU	05h	; Address of Port A.
PortD   	EQU 	08h 	; Address of Port D.
Adcon1		EQU	9Fh	; Address of Adcon1.


	ORG 0000h

START
	BSF 	Status,5	; Change to Memory Bank 1
	MOVLW 	0FFh		; Used to make PortA Digital
	MOVWF 	Adcon1  	; Set all bits on PortA to Digital
	CLRF 	TrisD		; Set all bits on PortD to outputs
	CLRF	TrisA		; Set all bits on PortA to outputs
	BSF 	TrisA,4		; Set Bit 4 on PortA to input
	BSF 	TrisA,5		; Set Bit 5 on PortA to input
	BCF 	Status,5	; Move to Memory Bank 0
	CLRF 	PortD		; Switch off all LED's
	CLRF	Counter		; Set counter to zero
SWITCH
	BTFSS 	PortA,4		; Check if up switch has been pressed
	CALL 	CUP		; Go and count up by one
	BTFSS 	PortA,5		; Check if down switch has been pressed
	CALL	CDOWN		; Go and count down by one 
	MOVF	Counter,0	; //
	SUBLW   B'00000101'	; Check to see if count is at 5
	BTFSC	Status,2	; //
	CLRF	Counter		; If counter is at 5 then reset the counter back to zero	
	MOVF	Counter,0		;
	SUBLW	B'11111111'	; Check to see if counter is at FF
	BTFSC	Status,2	; //
	CALL	Count5		; If counter os at FF then reset the counter to 5	
	CALL	SEVENSEG	; Set the value on the seven segment display
	MOVWF	PortD		; //
	MOVF	PortA,0		; Check to see if both switches have been pressed
	ANDLW	b'00110000'	; Make sure all other bits are 0
	BTFSC 	Status,2	; If both switches have been pressed Go to error state else carry on
	CALL	ERR		; Go into the error state
	CALL	DELAY		; Delay of 0.1s
	GOTO 	SWITCH     	; Go and check the switches again
Count5
	MOVLW	05h		; Set the counter to 5
	MOVWF	Counter		; //
	RETURN			;
CUP
	BTFSC	PortA,5		; Go and check if other switch (RA5) has been pressed
	INCF 	Counter		; Go and count one up
	RETURN			;
CDOWN
	BTFSC 	PortA,4		; Go and check if other switch (RA4) has been pressed
	DECF 	Counter		; Go and count one down
	RETURN			;
ERR
	CLRF	PortD		; Clear seven segment Display
	CALL	DELAY		; half second delay
	MOVLW	B'11111001'	; Seven segment code to put an e on display	
	MOVWF	PortD		; Show an "e" on display, for error
	CALL	DELAY		; half second delay
	MOVF	PortA,0		; Check to see if both switches have been pressed
	ANDLW	b'00110000'	; Make All the other bits O
	BTFSS 	Status,2	; If both switches have been pressed Go to error state else carry on
	RETURN			; 
	GOTO	ERR		; Loop again until only one switch is being pressed

SEVENSEG
	MOVF	Counter,0	; //
	ADDWF	PCL,F		; Set the value on seven segment display to counter
	RETLW	B'01110110'	;Decode 0
	RETLW	B'01111001'	;Decode 1
	RETLW	B'00111000'	;Decode 2
	RETLW	B'00111000'	;Decode 3
	RETLW	B'00111111'	;Decode 4
	RETLW	B'01101101'	;Decode 5
	RETLW	B'01111101'	;Decode 6
	RETLW	B'00000111'	;Decode 7
	RETLW	B'01111111'	;Decode 8
	RETLW	B'01101111'	;Decode 9

DELAY
	;RETURN			;Used for simulation purposes
	MOVLW 	02h		;Set delay for 0.5 Second
	MOVWF 	Loop3	 	;Set Loop3 to Loop 3 Times
LOOP	
	DECFSZ 	Loop1,1  	;Loop 255 times then move to next loop
	Goto 	LOOP		;Go Back to the beginning of the Loop
	DECFSZ 	Loop2,1  	;Loop 255 times then move to next loop
	Goto 	LOOP		;Go Back to the beginning of the Loop	
	DECFSZ 	Loop3,1  	;Loop 5 times then move to next loop
	Goto 	LOOP		;Go Back to the beginning of the Loop
	RETURN			;Go back and execute instruction after last call
	end			;End of Source
